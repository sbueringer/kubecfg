#!/bin/bash

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(dirname "$( readlink -f "${0}" 2>/dev/null || \
  python -c "import os,sys; print(os.path.realpath(sys.argv[1]))" "${0}" )")"

KUBECONFIG_DIR="${HOME}/.kube/kubecfg"
KUBECONFIG_FILE="${KUBECONFIG_DIR}/current"
mkdir -p $KUBECONFIG_DIR

usage() {
  cat <<"EOF"
USAGE:
  kubecfg current           : show current config
  kubecfg                   : list the config
  kubecfg <NAME>            : switch to config <NAME>
  kubecfg -h,--help         : show this message
EOF
  exit 1
}

get_configs(){
    (cd ${HOME}/.kube && ls config* | sort -n)
}

list_configs() {
  set -u pipefail
  local cur="$(read_config)"
  local yellow=$(tput setaf 3)
  local darkbg=$(tput setab 0)
  local normal=$(tput sgr0)

  for c in $(get_configs); do
  if [[ "${c}" = "${cur}" ]]; then
    echo "${darkbg}${yellow}${c}${normal}"
  else
    echo "${c}"
  fi
  done
}

read_config() {
  if [[ -f "${KUBECONFIG_FILE}" ]]; then
    cat "${KUBECONFIG_FILE}"
  fi
}

set_config(){
  echo ${1} > ${KUBECONFIG_FILE}
  list_configs
}


main() {
  if [[ "$#" -eq 0 ]]; then
    list_configs
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many flags" >&2
    usage
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == "current" ]]; then
      read_config
    elif [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    else
      set_config "${1}"
    fi
  else
    usage
  fi
}

main "$@"
